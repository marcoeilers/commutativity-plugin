import "../library/pair.vpr"
import "../library/unit.vpr"
import "../library/either.vpr"
import "../library/nat.vpr"
import "../library/list.vpr"



lockType Channel {
  type Pair[Seq[Int], Either[Nat, Seq[Int]]]
  // See paper appendix for a discussion of the (rather complex) representation of the channel
  invariant(l, v) = [l.queue |-> ?lp && list(lp) && [l.history |-[1/2]-> ?hi && v == pair(hi, right(listValue(lp))) ]]
  alpha(v): Pair[Seq[Int], Either[Nat, Seq[Int]]] = v

  actions = [(Prod, Int, unique), (Cons, Unit, unique)]  // Actions are produce and consume

  action Prod(pv, arg)
    requires low(arg)
  { (let v == (snd(pv)) in
    (is_right(v) ?
      ( pair(fst(pv), (right(Seq(arg) ++ right_val(v)): Either[Nat, Seq[Int]]))) :
      (nat_val(left_val(v)) > 0 ?
        (pair(fst(pv) ++ Seq(arg),   ( left(nat(nat_val(left_val(v)) - 1)): Either[Nat, Seq[Int]]))) :
        (pair(fst(pv) ++ Seq(arg),   ( right(Seq[Int]()): Either[Nat, Seq[Int]])))))
    )}

  action Cons(pv, arg)
    requires true
  {
    ( let v == (snd(pv)) in
    (is_right(v) ?
      (|right_val(v)| > 0 ?
        (pair(fst(pv) ++ Seq(right_val(v)[|right_val(v)|-1]), (right(right_val(v)[..|right_val(v)|-1]): Either[Nat, Seq[Int]]))) :
        pair(fst(pv), (left(nat(0)): Either[Nat, Seq[Int]])) ) :
      pair(fst(pv), (left(nat(nat_val(left_val(v)) + 1)): Either[Nat, Seq[Int]])))
    )
  }

  proof commutativity[Prod, Cons](pv, arg1, arg2) {
    var v: Either[Nat, Seq[Int]]
    v := snd(pv)
    if (is_right(v) && |right_val(v)| > 0) {
      assert (Seq(arg1) ++ right_val(v))[..|(Seq(arg1) ++ right_val(v))|-1] == (Seq(arg1) ++ (right_val(v)[..|right_val(v)|-1]))
    }
  }

  noLabels = 1
}

method enqueue(l: Ref, i: Int)
  requires list(l)
  ensures list(l) && listValue(l) == Seq(i) ++ old(listValue(l))

method dequeue(l: Ref) returns (r: Int)
  requires list(l) && |listValue(l)| > 0
  ensures list(l) && listValue(l) == old(listValue(l)[..|listValue(l)|-1]) 
  ensures r == old(listValue(l)[|listValue(l)|-1])

field queue: Ref
field history: Seq[Int]


method main(inputs: Seq[Int], secret: Int)
  requires lowEvent && low(inputs)
  ensures true
{
  
  var l : Lock
  l := new(queue, history)
  var lst: Ref
  lst := createList()
  l.queue := lst
  l.history := Seq[Int]()
  share[Channel](l, (let es == (Seq[Int]()) in (pair(es,  (right(es) : Either[Nat, Seq[Int]]) ))) )
  var cons : Thread
  var prod : Thread
  prod := fork producer(inputs, l, secret)
  cons := fork consumer(l, |inputs|, secret)
  join[producer](prod)
  var res: Int
  res := join[consumer](cons)
  unshare[Channel](l)
  print(res)
}




method producer(inputs: Seq[Int], l: Lock, secret: Int)
  requires lowEvent && low(inputs) && uguard[Channel,Prod](l) && uguardArgs[Channel,Prod](l) == Seq[Int]()
  ensures uguard[Channel,Prod](l) && allPre[Channel, Prod](uguardArgs[Channel,Prod](l))
{
  var i : Int := 0
  while (i < |inputs|) 
    invariant i >= 0 && i <= |inputs| && low(i) && uguard[Channel,Prod](l) && allPre[Channel, Prod](uguardArgs[Channel,Prod](l))
  {
    var newVal: Int
    newVal  := compute1(inputs[i], secret)

    with[Channel] l performing Prod(newVal) {
        enqueue(l.queue, newVal)
    }
    i := i + 1
  }
}


method consumer(l: Lock, n: Int, secret: Int) returns (res: Int)
  requires lowEvent && n >= 0 && low(n) && uguard[Channel,Cons](l) && uguardArgs[Channel,Cons](l) == Seq[Unit]() && [l.history |-[1/2]-> ?hi && |hi| == 0]
  ensures uguard[Channel,Cons](l) &&  allPre[Channel, Cons](uguardArgs[Channel,Cons](l)) && [l.history |-[1/2]-> ?hi && res == aggregate(hi)]
{
  var i : Int := 0
  res := INITIAL()
  while (i < n)
    invariant i >= 0 && i <= n && low(i) && uguard[Channel,Cons](l) &&  allPre[Channel, Cons](uguardArgs[Channel,Cons](l))
    invariant [l.history |-[1/2]-> ?hi && res == aggregate(hi)]
  {
    var recVal: Int
    var ohist : Seq[Int]
    var listlen: Int
    with[Channel] l when (|listValue(l.queue)| > 0) performing Cons(unit()) {
        listlen := listLength(l.queue)

        ohist := l.history
        recVal := dequeue(l.queue)
        l.history := l.history ++ Seq(recVal)
    }
    res := compute2(res, recVal, secret, ohist)
    i := i + 1
  }
}


method compute1(val: Int, secret: Int) returns (r1: Int)
  ensures low(val) ==> low(r1)

function INITIAL(): Int

function aggregate(s: Seq[Int]): Int
    ensures |s| == 0 ==> result == INITIAL()

method compute2(sum: Int, val: Int, secret: Int, ghost_s: Seq[Int]) returns (r: Int)
  requires sum == aggregate(ghost_s)
  ensures r == aggregate(ghost_s ++ Seq(val))

method print(i: Int)
  requires lowEvent && low(i)

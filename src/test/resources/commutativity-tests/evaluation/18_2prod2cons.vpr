import "../library/unit.vpr"
import "../library/seq_multiset.vpr"
import "../library/list.vpr"


field prod1: Seq[Int]
field prod2: Seq[Int]
field cons1: Seq[Int]
field cons2: Seq[Int]
field prod: Seq[Int]
field seenDone1: Bool
field seenDone2: Bool


lockType Channel {
  type Seq[Int]
  // The invariant is complex because we track various ghost state, e.g., each producer tracks which items it has produced.
  // v is mapped to the sequence of produced items.
  invariant(l, v) = [l.queue |-> ?qp && list(qp) &&
                      acc(l.prod1, 1/2) && acc(l.prod2, 1/2) && acc(l.prod) && acc(l.cons1, 1/2) && acc(l.cons2, 1/2) && acc(l.seenDone1, 1/2) && acc(l.seenDone2, 1/2) &&
                      seq_to_ms(l.prod) == seq_to_ms(listValue(qp)) union seq_to_ms(l.cons1) union seq_to_ms(l.cons2) &&
                      |seq_to_ms(l.prod)| == |seq_to_ms(listValue(qp))| + |seq_to_ms(l.cons1)| + |seq_to_ms(l.cons2)| &&
                      seq_to_ms(l.prod) == seq_to_ms(l.prod1) union seq_to_ms(l.prod2) &&
                      |seq_to_ms(l.prod)| == |seq_to_ms(l.prod1)| +  |seq_to_ms(l.prod2)| &&
                      (l.seenDone1 ==> |listValue(qp)| == 0 && |seq_to_ms(listValue(qp))| == 0 && |l.prod| == 2*N()) &&
                      (l.seenDone2 ==> |listValue(qp)| == 0 && |seq_to_ms(listValue(qp))| == 0 && |l.prod| == 2*N()) &&
                      |l.prod1| <= N() && |l.prod2| <= N() &&
                      v == l.prod]
  alpha(v) : Multiset[Int] = seq_to_ms(v)  // the multiset view of the produced items is low

  actions = [(Prod, Int, duplicable), (Cons, Unit, duplicable)]

  action Prod(pv, arg)
    requires low(arg)
  {
    pv ++ Seq(arg)
  }

  action Cons(pv, arg)
    requires true
  {
    pv
  }

  noLabels = 2
}

method enqueue(l: Ref, i: Int)
  requires list(l)
  ensures list(l) && listValue(l) == Seq(i) ++ old(listValue(l))

method dequeue(l: Ref) returns (r: Int)
  requires list(l) && |listValue(l)| > 0
  ensures list(l) && listValue(l) == old(listValue(l)[..|listValue(l)|-1]) 
  ensures r == old(listValue(l)[|listValue(l)|-1])

field queue: Ref

function N(): Int
    ensures result > 1


method main(inputs1: Seq[Int], inputs2: Seq[Int], secret: Int)
  requires lowEvent && low(inputs1) && low(inputs2)
  requires |inputs1| == N() && |inputs2| == N()
{
  
  var l : Lock
  l := new(queue, prod1, prod2, prod, cons1, cons2, seenDone1, seenDone2)
  l.seenDone1 := false
  l.seenDone2 := false
  l.prod := Seq[Int]()
  l.prod1 := Seq[Int]()
  l.prod2 := Seq[Int]()
  l.cons1 := Seq[Int]()
  l.cons2 := Seq[Int]()
  var lst: Ref
  lst := createList()
  l.queue := lst
  share[Channel](l, Seq[Int]())
  var tcons1 : Thread
  var tprod1 : Thread
  var tcons2 : Thread
  var tprod2 : Thread
  assert intervalSet(0, 2) == Set(0) union Set(1)
  assert Multiset[Int]() union Multiset[Int]() == Multiset[Int]()
  split[Channel,Prod](l, Set(0), Set(1), Multiset[Int](), Multiset[Int]())
  split[Channel,Cons](l, Set(0), Set(1), Multiset[Unit](), Multiset[Unit]())
  tprod1 := fork producer1(inputs1, l, secret)
  tprod2 := fork producer2(inputs2, l, secret)
  tcons1 := fork consumer1(l, secret)
  tcons2 := fork consumer2(l, secret)
  join[producer1](tprod1)
  join[producer2](tprod2)
  var res1: Int
  var res2: Int
  var res: Int
  res1 := join[consumer1](tcons1)
  res2 := join[consumer2](tcons2)
  merge[Channel, Prod](l, Set(0), Set(1))
  merge[Channel, Cons](l, Set(0), Set(1))
  unshare[Channel](l)

  assert seq_to_ms(l.prod) == seq_to_ms(l.cons1) union seq_to_ms(l.cons2)
  res := combine(res1, res2, l.cons1, l.cons2)
  print(res)
}




method producer1(inputs: Seq[Int], l: Lock, secret: Int)
  requires lowEvent && low(inputs) && |inputs| == N() && sguard[Channel,Prod](l, Set(0)) && sguardArgs[Channel,Prod](l, Set(0)) == Multiset[Int]()
  requires acc(l.prod1, 1/2) && |l.prod1| == 0
  requires |inputs| == N()
  ensures sguard[Channel,Prod](l, Set(0)) && allPre[Channel, Prod](sguardArgs[Channel,Prod](l, Set(0)))
  ensures acc(l.prod1, 1/2) && |l.prod1| == N()
{
  var i : Int := 0
  while (i < |inputs|) 
    invariant i >= 0 && i <= |inputs| && low(i) && sguard[Channel,Prod](l, Set(0)) && allPre[Channel, Prod](sguardArgs[Channel,Prod](l, Set(0)))
    invariant  acc(l.prod1, 1/2) && |l.prod1| == i
    invariant i >= 0 && i <= N()
  {
    var newVal: Int
    newVal  := compute1(inputs[i], secret)

    with[Channel] l performing Prod(newVal) at 0 {
        enqueue(l.queue, newVal)
        l.prod1 := l.prod1 ++ Seq(newVal)
        l.prod := l.prod ++ Seq(newVal)
    }
    i := i + 1
  }
}

method producer2(inputs: Seq[Int], l: Lock, secret: Int)
  requires lowEvent && low(inputs) && |inputs| == N() && sguard[Channel,Prod](l, Set(1)) && sguardArgs[Channel,Prod](l, Set(1)) == Multiset[Int]()
  requires acc(l.prod2, 1/2) && |l.prod2| == 0
  requires |inputs| == N()
  ensures sguard[Channel,Prod](l, Set(1)) && allPre[Channel, Prod](sguardArgs[Channel,Prod](l, Set(1)))
  ensures acc(l.prod2, 1/2) && |l.prod2| == N()
{
  var i : Int := 0
  while (i < |inputs|)
    invariant i >= 0 && i <= |inputs| && low(i) && sguard[Channel,Prod](l, Set(1)) && allPre[Channel, Prod](sguardArgs[Channel,Prod](l, Set(1)))
    invariant  acc(l.prod2, 1/2) && |l.prod2| == i
    invariant i >= 0 && i <= N()
  {
    var newVal: Int
    newVal  := compute1(inputs[i], secret)

    with[Channel] l performing Prod(newVal) at 1 {
        enqueue(l.queue, newVal)
        l.prod2 := l.prod2 ++ Seq(newVal)
        l.prod := l.prod ++ Seq(newVal)
    }
    i := i + 1
  }
}


method consumer1(l: Lock,secret: Int) returns (res: Int)
  requires lowEvent && sguard[Channel,Cons](l, Set(0)) && sguardArgs[Channel,Cons](l, Set(0)) == Multiset[Unit]()
  requires acc(l.cons1, 1/2) && |l.cons1| == 0  && acc(l.seenDone1, 1/2) && !l.seenDone1
  ensures acc(l.cons1, 1/2) && acc(l.seenDone1, 1/2) && l.seenDone1
  ensures sguard[Channel,Cons](l, Set(0)) && |sguardArgs[Channel,Cons](l, Set(0))| == |l.cons1| + (l.seenDone1 ? 1 : 0)
  ensures res == aggregate(seq_to_ms(l.cons1))
{
  var stop : Bool := false
  res := INITIAL()
  while (!stop)
    invariant sguard[Channel,Cons](l, Set(0))
    invariant acc(l.cons1, 1/2) && acc(l.seenDone1, 1/2)
    invariant |sguardArgs[Channel,Cons](l, Set(0))| == |l.cons1| + (l.seenDone1 ? 1 : 0)
    invariant stop == l.seenDone1
    invariant res == aggregate(seq_to_ms(l.cons1))
  {
    var recVal: Int
    var listlen: Int
    with[Channel] l when (|listValue(l.queue)| > 0 || |l.prod| == 2* N()) performing Cons(unit()) at 0 {
        label before
        listlen := listLength(l.queue)
        if (listlen > 0) {
            recVal := dequeue(l.queue)

            res := compute2(res, recVal, secret, l.cons1)

            l.cons1 := l.cons1 ++ Seq(recVal)
        }else{
            l.seenDone1 := true
            stop := true
        }
    }

  }
}

method consumer2(l: Lock, secret: Int) returns (res: Int)
  requires lowEvent && sguard[Channel,Cons](l, Set(1)) && sguardArgs[Channel,Cons](l, Set(1)) == Multiset[Unit]()
  requires acc(l.cons2, 1/2) && |l.cons2| == 0 && acc(l.seenDone2, 1/2) && !l.seenDone2
  ensures acc(l.cons2, 1/2) && acc(l.seenDone2, 1/2) && l.seenDone2
  ensures sguard[Channel,Cons](l, Set(1)) && |sguardArgs[Channel,Cons](l, Set(1))| == |l.cons2| + (l.seenDone2 ? 1 : 0)
  ensures res == aggregate(seq_to_ms(l.cons2))
{
  var stop : Bool := false
  res := INITIAL()

  while (!stop)
    invariant sguard[Channel,Cons](l, Set(1))
    invariant acc(l.cons2, 1/2) && acc(l.seenDone2, 1/2)
    invariant |sguardArgs[Channel,Cons](l, Set(1))| == |l.cons2| + (l.seenDone2 ? 1 : 0)
    invariant stop == l.seenDone2
    invariant res == aggregate(seq_to_ms(l.cons2))
  {
    var recVal: Int
    var listlen: Int
    with[Channel] l when (|listValue(l.queue)| > 0 || |l.prod| == 2* N()) performing Cons(unit()) at 1 {
        listlen := listLength(l.queue)
        if (listlen > 0) {
            recVal := dequeue(l.queue)

            res := compute2(res, recVal, secret, l.cons2)

            l.cons2 := l.cons2 ++ Seq(recVal)
        }else{
            l.seenDone2 := true
            stop := true
        }
    }

  }
}



method compute1(val: Int, secret: Int) returns (r1: Int)
  ensures low(val) ==> low(r1)

function INITIAL(): Int

function aggregate(s: Multiset[Int]): Int
    ensures |s| == 0 ==> result == INITIAL()

method compute2(sum: Int, val: Int, secret: Int, ghost_s: Seq[Int]) returns (r: Int)
  requires sum == aggregate(seq_to_ms(ghost_s))
  ensures r == aggregate(seq_to_ms(ghost_s) union Multiset(val))


method combine(sum1: Int, sum2: Int, ghost_s1: Seq[Int],  ghost_s2: Seq[Int]) returns (r: Int)
    requires sum1 == aggregate(seq_to_ms(ghost_s1))
    requires sum2 == aggregate(seq_to_ms(ghost_s2))
    ensures r == aggregate(seq_to_ms(ghost_s1) union seq_to_ms(ghost_s2))

method print(i: Int)
  requires lowEvent && low(i)

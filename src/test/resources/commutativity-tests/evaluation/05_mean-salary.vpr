import "../library/seq_multiset.vpr"
import "../library/list.vpr"
import "../library/array.vpr"
import "../library/pair.vpr"

// mean-salary

method getSalary(vl: Ref) returns (r1: Int)
  requires employee(vl)
  ensures employee(vl) && low(r1)
{
    r1 := vl.salary
}


lockType ListLock {
    type Seq[Int]
    invariant(l, v) = [l.lockList |-> ?lp && list(lp) && v == listValue(lp)]
    alpha(v): Pair[Int, Int] = pair(sum(v), |v|)  // We abstract to a pair containing the sum of all values and the number of all values,
                                                  // from which we can compute the mean.

    actions = [(Append, Int, duplicable)]

    action Append(v, arg)
      requires low(arg)
    { (v ++ Seq(arg)) }

  noLabels = N()
}

// Employees have a name, a salary, and ID, and a date of birth.
// Only the salary is low.
define employee(r) (
    acc(r.name) && acc(r.salary) && acc(r.id) && acc(r.dob) && low(r.salary)
)

field name: Int
field salary: Int
field id: Int
field dob: Int


method main(inputs: Seq[Seq[Ref]])
  requires lowEvent && low(|inputs|) && |inputs| == N()
  requires forall ip: Int :: ip >= 0 && ip < N() ==> low(|inputs[ip]|)
  requires forall ip: Int, jp: Int :: ip >= 0 && ip < N() && jp >= 0 && jp < |inputs[ip]| ==> employee(inputs[ip][jp])
{
  var lst : Ref
  lst := createList()
  var l : Lock
  l := new(lockList)
  l.lockList := lst
  share[ListLock](l, Seq[Int]())
  var i : Int := 0
  var threads : Array
  threads := emptyArray(|inputs|)
  while (i < |inputs|)
    invariant i >= 0 && i <= |inputs| && low(i)
    invariant forall j : Int :: j >= 0 && j < |inputs| && j >= i ==> [loc(threads, j).arr_loc |-> _]
    invariant forall j : Int :: j >= 0 && j < i ==> joinableArrayEntry(loc(threads, j), inputs[j], l, j)
    invariant sguard[ListLock,Append](l, intervalSet(i, N())) && sguardArgs[ListLock, Append](l, intervalSet(i, N())) == Multiset[Int]()
    invariant forall ip: Int, jp: Int :: ip >= i && ip < N() && jp >= 0 && jp < |inputs[ip]| ==> employee(inputs[ip][jp])
  {
    var t: Thread
    assert Set(i) union intervalSet(i+1, N()) == intervalSet(i, N())
    split[ListLock,Append](l, Set(i), intervalSet(i+1, N()), Multiset[Int](), Multiset[Int]())
    t := fork worker(inputs[i], l, i)
    loc(threads, i).arr_loc := t
    fold joinableArrayEntry(loc(threads, i), inputs[i], l, i)
    i := i + 1
  }
  
  i := 0
  while (i < |inputs|)
    invariant i >= 0 && i <= |inputs| && low(i)
    invariant forall j : Int :: j >= 0 && j < |inputs| && j >= i ==> joinableArrayEntry(loc(threads, j), inputs[j], l, j)
    invariant forall j : Int :: j >= 0 && j < i ==> [loc(threads, j).arr_loc |-> _] 
    invariant sguard[ListLock,Append](l, intervalSet(0, i)) && allPre[ListLock, Append](sguardArgs[ListLock,Append](l, intervalSet(0, i)))
  {
    unfold joinableArrayEntry(loc(threads, i), inputs[i], l, i)
    join[worker](loc(threads, i).arr_loc)
    assert Set(i) union intervalSet(0, i) == intervalSet(0, i + 1)
    merge[ListLock, Append](l, Set(i), intervalSet(0, i))
    i := i + 1
  }
  unshare[ListLock](l)

  var lv : Seq[Int] := listValue(l.lockList)
  print(|lv| > 0 ? sum(lv) \ |lv| : 0)  // compute and output the mean if the number of entries is non-zero

}


method worker(inputs: Seq[Ref], l: Lock, lbl: Int)
  requires lowEvent && low(|inputs|) && sguard[ListLock,Append](l, Set(lbl)) && sguardArgs[ListLock,Append](l, Set(lbl)) == Multiset[Int]()
  requires forall jp: Int :: jp >= 0 && jp < |inputs| ==> employee(inputs[jp])
  ensures sguard[ListLock,Append](l, Set(lbl)) && allPre[ListLock, Append](sguardArgs[ListLock,Append](l, Set(lbl)))
{
  var i : Int := 0
  while (i < |inputs|) 
    invariant i >= 0 && i <= |inputs| && low(i) && sguard[ListLock,Append](l, Set(lbl)) && allPre[ListLock, Append](sguardArgs[ListLock,Append](l, Set(lbl)))
    invariant forall jp: Int :: jp >= 0 && jp < |inputs| ==> employee(inputs[jp])
  {
    var v: Int
    v := getSalary(inputs[i])
    with[ListLock] l performing Append(v) at lbl {
        append(l.lockList, v)
    }

    i := i + 1
  }
}


field lockList : Ref

function toSeq(s: Set[Int]) : Seq[Int]

predicate joinableArrayEntry(rec: Ref, inputs: Seq[Ref], l: Ref, lbl: Int) {
  [rec.arr_loc |-> ?al && joinable[worker](al, inputs, l, lbl)]
}

domain SumDomain {
  function sum(s: Seq[Int]): Int
  axiom sum_empty {
    sum(Seq[Int]()) == 0
  }
  axiom sum_single {
    forall i: Int :: { sum(Seq(i)) } sum(Seq(i)) == i
  }

  axiom sum_append {
    forall s1: Seq[Int], i: Int :: { sum(s1 ++ Seq(i)) } sum(s1 ++ Seq(i)) == (sum(s1) + i)
  }
}

method print(i: Int)
  requires lowEvent && low(i)

function N(): Int
    ensures result > 1
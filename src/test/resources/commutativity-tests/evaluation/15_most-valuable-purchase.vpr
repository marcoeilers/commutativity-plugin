import "library/pair.vpr"
import "library/hashmap_ref.vpr"

// most valuable purchase


lockType MapLock {
  type MyMap[Int, Int]
  invariant(l, v) = [l.lockMap |-> ?mp && isMap(mp) && v == mapValue(mp)]
  alpha(v): MyMap[Int, Int] = v

    actions = [(PutGreater, Pair[Int, Int], duplicable)]

    action PutGreater(v, arg)
      requires low(arg)
    // put if key not currently present, or if put value is greater than current value
    { (!(fst(arg) in keys(v)) || get(v, fst(arg)) < snd(arg) ? put(v, fst(arg), snd(arg)) : v) }

    proof commutativity[PutGreater, PutGreater](v, arg1, arg2) {
      var r1 : MyMap[Int, Int]
      var r2 : MyMap[Int, Int]
      if (fst(arg1) == fst(arg2)){
      if (snd(arg1) < snd(arg2)) {
          r1 := put(put(v, fst(arg1), snd(arg1)), fst(arg2), snd(arg2))
          r2 := put(v, fst(arg2), snd(arg2))
          assert map_eq(r1, r2)
      }else{
          if (snd(arg2) < snd(arg1)){
              r1 := put(v, fst(arg1), snd(arg1))
              r2 := put(put(v, fst(arg2), snd(arg2)), fst(arg1), snd(arg1))
              assert map_eq(r1, r2)
          }
      }
      }else{
          r1 := put(put(v, fst(arg1), snd(arg1)), fst(arg2), snd(arg2))
          r2 := put(put(v, fst(arg2), snd(arg2)), fst(arg1), snd(arg1))
          assert map_eq(r1, r2)
      }

    }

  noLabels = N()
}

// purchase record has customer id, customer name, purchased item, and price. Only ID and price are low.
define patient(r) (
    acc(r.id) && acc(r.name) && acc(r.items) && acc(r.price) &&  low(r.id) && low(r.price)
)

field name: Int
field id: Int
field items: Seq[Int]
field price: Int

method main(inputs: Seq[Seq[Ref]])
  requires lowEvent && low(|inputs|) && |inputs| == N()
    requires forall ip: Int :: ip >= 0 && ip < N() ==> low(|inputs[ip]|)
    requires forall ip: Int, jp: Int :: ip >= 0 && ip < N() && jp >= 0 && jp < |inputs[ip]| ==> patient(inputs[ip][jp])
{
  var m : Ref
  m := createMap()
  var l : Lock
  l := new(lockMap)
  l.lockMap := m
  share[MapLock](l, empty())
  var i : Int := 0
  var threads : Array
  threads := emptyArray(|inputs|)
  while (i < |inputs|)
    invariant i >= 0 && i <= |inputs| && low(i)
    invariant forall j : Int :: j >= 0 && j < |inputs| && j >= i ==> [loc(threads, j).arr_loc |-> _]
    invariant forall j : Int :: j >= 0 && j < i ==> joinableArrayEntry(loc(threads, j), inputs[j], l, j)
    invariant sguard[MapLock,PutGreater](l, intervalSet(i, N())) && sguardArgs[MapLock, PutGreater](l, intervalSet(i, N())) == Multiset[Pair[Int, Int]]()
    invariant forall ip: Int, jp: Int :: ip >= i && ip < N() && jp >= 0 && jp < |inputs[ip]| ==> patient(inputs[ip][jp])
  {
    var t: Thread
    assert Set(i) union intervalSet(i+1, N()) == intervalSet(i, N())
    split[MapLock,PutGreater](l, Set(i), intervalSet(i+1, N()), Multiset[Pair[Int, Int]](), Multiset[Pair[Int, Int]]())
    t := fork worker(inputs[i], l, i)
    loc(threads, i).arr_loc := t
    fold joinableArrayEntry(loc(threads, i), inputs[i], l, i)
    i := i + 1
  }
  
  i := 0
  while (i < |inputs|)
    invariant i >= 0 && i <= |inputs| && low(i)
    invariant forall j : Int :: j >= 0 && j < |inputs| && j >= i ==> joinableArrayEntry(loc(threads, j), inputs[j], l, j)
    invariant forall j : Int :: j >= 0 && j < i ==> [loc(threads, j).arr_loc |-> _] 
    invariant sguard[MapLock,PutGreater](l, intervalSet(0, i)) && allPre[MapLock, PutGreater](sguardArgs[MapLock,PutGreater](l, intervalSet(0, i)))
  {
    unfold joinableArrayEntry(loc(threads, i), inputs[i], l, i)
    join[worker](loc(threads, i).arr_loc)
    assert Set(i) union intervalSet(0, i) == intervalSet(0, i + 1)
    merge[MapLock, PutGreater](l, Set(i), intervalSet(0, i))
    i := i + 1
  }
  unshare[MapLock](l)

  var res: Seq[Int]
  res := toSeq(keys(mapValue(l.lockMap)))
  print(res)

}


method worker(inputs: Seq[Ref], l: Lock, lbl: Int)
  requires lowEvent && low(|inputs|) && sguard[MapLock,PutGreater](l, Set(lbl)) && sguardArgs[MapLock,PutGreater](l, Set(lbl)) == Multiset[Pair[Int, Int]]()
  requires forall jp: Int :: jp >= 0 && jp < |inputs| ==> patient(inputs[jp])
  ensures sguard[MapLock,PutGreater](l, Set(lbl)) && allPre[MapLock, PutGreater](sguardArgs[MapLock,PutGreater](l, Set(lbl)))
{
  var i : Int := 0
  while (i < |inputs|) 
    invariant i >= 0 && i <= |inputs| && low(i) && sguard[MapLock,PutGreater](l, Set(lbl)) && allPre[MapLock, PutGreater](sguardArgs[MapLock,PutGreater](l, Set(lbl)))
    invariant forall jp: Int :: jp >= 0 && jp < |inputs| ==> patient(inputs[jp])
  {
    var k: Int
    k := inputs[i].id
    var v: Int
    v := inputs[i].price
    with[MapLock] l performing PutGreater(pair(k, v)) at lbl {
        var tmp : MyMap[Int, Int]
        tmp := mapValue(l.lockMap)
        var contained: Bool
        var currentVal : Int
        contained, currentVal := mapGet(l.lockMap, k)
        if (!contained){
            mapPut(l.lockMap, k, v)
            assert mapValue(l.lockMap) == put(tmp, k, v)
        }else{
            if (v > currentVal) {
                mapPut(l.lockMap, k, v)
                assert mapValue(l.lockMap) == put(tmp, k, v)
            }

        }
    }

    i := i + 1
  }
}


predicate joinableArrayEntry(rec: Ref, inputs: Seq[Ref], l: Ref, lbl: Int) {
  [rec.arr_loc |-> ?al && joinable[worker](al, inputs, l, lbl)]
}

function toSeq(s: Set[Int]) : Seq[Int]

field lockMap : Ref

function N(): Int
    ensures result > 1

function nTargets(): Int

method print(i: Seq[Int])
  requires lowEvent && low(i)
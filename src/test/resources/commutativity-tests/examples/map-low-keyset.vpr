import "library/pair.vpr"
import "library/map.vpr"
import "library/array.vpr"

method print(i: Seq[Int])
  requires lowEvent && low(i)


lockType MapLock {
  type Map[Int, Int]
  invariant(l, v) = [l.lockMap |-> ?mp && isMap(mp) && v == mapValue(mp)]
  alpha(v): Set[Int] = keys(v)

  actions = [(Put, Pair[Int, Int], duplicable)]
  
  action Put(v, arg)
    requires low(fst(arg))
  { (put(v, fst(arg), snd(arg))) }
}

predicate joinableArrayEntry(rec: Ref, inputs: Seq[Int], l: Ref, secret: Int, p: Perm) {
  [rec.arr_loc |-> ?al && joinable[worker](al, inputs, l, secret, p)]
}

function toSeq(s: Set[Int]) : Seq[Int]

field lockMap : Ref


method main(inputs: Seq[Seq[Int]], secret: Int)
  requires lowEvent && low(inputs)
  ensures true
{
  var m : Ref
  m := createMap()
  var l : Lock
  l := newLock[MapLock](lockMap)
  l.lockMap := m
  share[MapLock](l, empty())
  var i : Int := 0
  var threads : Array
  threads := emptyArray(|inputs|)
  while (i < |inputs|)
    invariant i >= 0 && i <= |inputs| && low(i)
    invariant forall j : Int :: j >= 0 && j < |inputs| && j >= i ==> [loc(threads, j).arr_loc |-> _]
    invariant forall j : Int :: j >= 0 && j < i ==> joinableArrayEntry(loc(threads, j), inputs[j], l, secret, 1/(|inputs| + 1))
    invariant lock[MapLock](l, (|inputs|+1-i)/(|inputs| + 1))
    invariant guard[MapLock,Put](l)
  {
    var t: Thread
    t := fork worker(inputs[i], l, secret, 1/(|inputs| + 1))
    loc(threads, i).arr_loc := t
    fold joinableArrayEntry(loc(threads, i), inputs[i], l, secret, 1/(|inputs| + 1))
    i := i + 1
  }
  
  i := 0
  while (i < |inputs|)
    invariant i >= 0 && i <= |inputs| && low(i)
    invariant forall j : Int :: j >= 0 && j < |inputs| && j >= i ==> joinableArrayEntry(loc(threads, j), inputs[j], l, secret, 1/(|inputs| + 1)) 
    invariant forall j : Int :: j >= 0 && j < i ==> [loc(threads, j).arr_loc |-> _] 
    invariant lock[MapLock](l, (i+1)/(|inputs| + 1))
  {
    unfold joinableArrayEntry(loc(threads, i), inputs[i], l, secret, 1/(|inputs| + 1))
    join[worker](loc(threads, i).arr_loc)
    i := i + 1
  }
  acquire[MapLock](l)
  var res: Seq[Int]
  res := toSeq(keys(mapValue(l.lockMap)))
  print(res)

}


method worker(inputs: Seq[Int], l: Lock, secret: Int, p: Perm)
  requires lowEvent && low(inputs) && lock[MapLock](l, p) && guard[MapLock,Put](l) && p > none
  ensures lock[MapLock](l, p)
{
  var i : Int := 0
  while (i < |inputs|) 
    invariant i >= 0 && i <= |inputs| && low(i) && lock[MapLock](l, p) && guard[MapLock,Put](l)
  {
    var k: Int
    var v: Int
    k, v := compute(inputs[i], secret)
    acquire[MapLock](l)
    var tmp : Map[Int, Int]
    tmp := mapValue(l.lockMap) 
    mapPut(l.lockMap, k, v)
    assert mapValue(l.lockMap) == put(tmp, k, v) 
    release[MapLock](l, Put(pair(k, v)))
    i := i + 1
    
  }
}

method compute(val: Int, secret: Int) returns (r1: Int, r2: Int)
  ensures low(val) ==> low(r1)

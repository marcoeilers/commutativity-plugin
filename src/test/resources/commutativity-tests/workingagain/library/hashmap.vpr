domain Array {
  function loc(a: Array, i: Int): Ref
  function len(a: Array): Int
  function loc_inv_arr(r: Ref): Array
  function loc_inv_index(r: Ref): Int

  axiom all_diff {
    forall a: Array, i: Int :: {loc(a, i)} loc_inv_arr(loc(a, i)) == a && loc_inv_index(loc(a, i)) == i
  }

  axiom length_nonneg {
    forall a: Array :: len(a) >= 0
  }
}

field arr_loc: Ref

method emptyArray(n: Int) returns (a: Array)
  requires n >= 0
  ensures len(a) == n && forall i : Int :: i >= 0 && i < n ==> acc(loc(a, i).arr_loc)

////

domain MyMap[T,V0] {
  function empty(): MyMap[T,V0]
  function keys(m: MyMap[T,V0]): Set[T]
  function get(m: MyMap[T,V0], k: T) : V0
  function put(m: MyMap[T,V0], k: T, v: V0): MyMap[T,V0]
  function map_eq(m1: MyMap[T,V0], m2: MyMap[T,V0]) : Bool
  function map_merge(m1: MyMap[T,V0], m2: MyMap[T,V0]): MyMap[T, V0]

  function singleton(k: T, v: V0): MyMap[T, V0]

  axiom equality_def {
    forall m1: MyMap[T,V0], m2: MyMap[T,V0] :: {map_eq(m1, m2)}
        map_eq(m1, m2) == (keys(m1) == keys(m2) && forall k: T :: k in keys(m1) ==> get(m1, k) == get(m2, k))
  }

  axiom equality_extensional {
    forall m1: MyMap[T,V0], m2: MyMap[T,V0] :: {map_eq(m1, m2)} map_eq(m1, m2) ==> m1 == m2
  }

  axiom empty_def {
    keys((empty(): MyMap[T, V0])) == Set[T]()
  }

  axiom single_def {
    (forall k: T, v: V0 :: keys(singleton(k, v)) == Set(k))
    &&
    (forall k: T, v: V0 :: get(singleton(k, v), k) == v)
  }

  axiom merge_def {
    (forall m1: MyMap[T, V0], m2: MyMap[T, V0] :: {map_merge(m1, m2)} keys(m1) intersection keys(m2) == Set[T]() ==>
      keys(map_merge(m1, m2)) == keys(m1) union keys(m2) && forall k: T:: k in keys(map_merge(m1, m2)) ==> get(map_merge(m1, m2), k) == (k in keys(m1) ? get(m1, k) : get(m2, k)) )
  }

  axiom put_keys {
    forall m: MyMap[T,V0], k: T, v: V0 :: {keys(put(m, k, v))} keys(put(m, k, v)) == keys(m) union Set(k)
  }

  axiom put_get {
    forall m: MyMap[T,V0], k1: T, k2: T, v: V0 :: {get(put(m, k1, v), k2)} get(put(m, k1, v), k2) == (k1 == k2 ? v : get(m, k2))
  }
}

////////////////////

domain K {}
domain V {}

field key: K
field value: V
field next: Ref
field arr: Array
function nBuckets(): Int
{ 4 }

predicate ListMap(r: Ref) {

  (acc(r.key) && acc(r.value) && acc(r.next) && (r.next != null ==> ListMap(r.next) && !ListMap_contains(r.next, r.key)))
}

function ListMap_contains(r: Ref, k: K): Bool
  requires acc(ListMap(r), 1/100)
  ensures result == k in keys(ListMap_mapValue(r))
{
  unfolding acc(ListMap(r), 1/100) in (r.next == null ? false : r.key == k ? true : ListMap_contains(r.next, k))
}

function ListMap_get(r: Ref, k: K): V
  requires acc(ListMap(r), 1/100)
  requires ListMap_contains(r, k)
  ensures result == get(ListMap_mapValue(r), k)
{
  unfolding acc(ListMap(r), 1/100) in (r.key == k ? r.value : ListMap_get(r.next, k))
}

function ListMap_mapValue(r: Ref): MyMap[K, V]
  requires acc(ListMap(r), 1/100)
{
  unfolding acc(ListMap(r), 1/100) in (r.next == null ? empty() : put(ListMap_mapValue(r.next), r.key, r.value))
}

method createListMap() returns (r: Ref)
{
  r := null
}

method ListMap_put(r: Ref, k: K, v: V)
  requires ListMap(r)
  ensures ListMap(r) && (ListMap_mapValue(r) == put(old(ListMap_mapValue(r)), k, v))
{
  if (ListMap_contains(r, k)) {
    unfold ListMap(r)
    if (r.key == k) {
      r.value := v
      fold ListMap(r)
      //assert keys(ListMap_mapValue(res)) == keys(put(old(ListMap_mapValue(r)), k, v))
      //assert get(ListMap_mapValue(res), k) == get(put(old(ListMap_mapValue(r)), k, v), k)
      assert map_eq(ListMap_mapValue(r), put(old(ListMap_mapValue(r)), k, v))
    }else{
      ListMap_put(r.next, k, v)
      fold ListMap(r)
      assert map_eq(ListMap_mapValue(r), put(old(ListMap_mapValue(r)), k, v))
    }
  }else{
    unfold ListMap(r)
    var newNode: Ref
    newNode := new(key, value, next)
    if (r.next == null){
      r.next := newNode
      newNode.next := null
      r.key := k
      r.value := v
    } else {
      newNode.next := r.next
      newNode.key := k
      newNode.value := v
      r.next := newNode
    }
    fold ListMap(newNode)
    fold ListMap(r)
    assert map_eq(ListMap_mapValue(r), put(old(ListMap_mapValue(r)), k, v))
  }
}

// array of buckets?

function hashCode(k: K): Int
  ensures result >= 0 && result < nBuckets()

predicate isMap(r: Ref) {
  acc(r.arr) && len(r.arr) == nBuckets() &&
  forall i: Int :: {loc(r.arr, i)} i >= 0 && i < len(r.arr) ==> acc(loc(r.arr, i).arr_loc) && ListMap(loc(r.arr, i).arr_loc) &&
    (forall k: K :: ListMap_contains(loc(r.arr, i).arr_loc, k) ==> hashCode(k) == i) &&
    (forall k: K :: k in keys(ListMap_mapValue(loc(r.arr, i).arr_loc)) ==> hashCode(k) == i)
}

function mapValue(r: Ref): MyMap[K, V]
  requires acc(isMap(r), 1/100)
{
  unfolding isMap(r) in
  map_merge(map_merge(map_merge(ListMap_mapValue(loc(r.arr, 0).arr_loc), ListMap_mapValue(loc(r.arr, 1).arr_loc)), ListMap_mapValue(loc(r.arr, 2).arr_loc)), ListMap_mapValue(loc(r.arr, 3).arr_loc))
}

method createMap() returns (r: Ref)
  ensures isMap(r) && mapValue(r) == empty()
{
  r := new(arr)
  var newArr : Array
  newArr := emptyArray(nBuckets())
  r.arr := newArr
  var j: Int
  j := 0
  while (j < nBuckets())
    invariant j >= 0 && j <= nBuckets()
    invariant forall i: Int :: i >= 0 && i < j ==> acc(loc(r.arr, i).arr_loc) && ListMap(loc(r.arr, i).arr_loc) && forall k: K :: ListMap_contains(loc(r.arr, i).arr_loc, k) ==> hashCode(k) == i
  {
    var newListMap: Ref
    newListMap := createListMap()
    loc(r.arr, j).arr_loc := newListMap
  }

  fold isMap(r)
}

method mapPut(r: Ref, k: K, v: V)
  requires isMap(r)
  ensures isMap(r) && mapValue(r) == put(old(mapValue(r)), k, v)
{
  unfold isMap(r)
  var hash: Int
  hash := hashCode(k)
  var bucket: Ref
  bucket := loc(r.arr, hash).arr_loc
  ListMap_put(bucket, k, v)
  fold isMap(r)
  assert map_eq(mapValue(r), put(old(mapValue(r)), k, v))
}

method mapGet(r: Ref, k: K) returns (contained: Bool, vl: V)
  requires acc(isMap(r), 1/100)
  ensures acc(isMap(r), 1/100) && contained == (k in keys(mapValue(r))) && (contained ==> vl == get(mapValue(r), k))
{
  var hash: Int
  hash := hashCode(k)
  var bucket: Ref
  unfold acc(isMap(r), 1/100)
  bucket := loc(r.arr, hash).arr_loc
  if (ListMap_contains(bucket, k)) {
    contained := true
    vl := ListMap_get(bucket, k)
  }else {
    contained := false
  }
  fold acc(isMap(r), 1/100)
}
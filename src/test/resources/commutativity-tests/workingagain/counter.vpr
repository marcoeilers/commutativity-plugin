import "library/unit.vpr"
import "library/array.vpr"

// count-vaccinated

method print(i: Int)
  requires lowEvent && low(i)

method compute(vl: Ref) returns (r1: Bool)
    requires patient(vl)
    ensures patient(vl) && low(r1)
{
    r1 := vl.vaccinated
}

lockType CounterLock {
  type Int
  invariant(l, v) = [l.lockCounter |-> ?cp && [cp.val |-> v]]
  alpha(v): Int = v

    actions = [(Add, Unit, duplicable)]

      action Add(v, arg)
        requires true
      { v + 1 }

  noLabels = N()
}

predicate joinableArrayEntry(rec: Ref, inputs: Seq[Ref], l: Ref, lbl: Int) {
  [rec.arr_loc |-> ?al && joinable[worker](al, inputs, l, lbl)]
}


field lockCounter : Ref
field val: Int

function N(): Int
    ensures result > 1

field name: Int
field vaccinated: Bool
field id: Int
field dob: Int


define patient(r) (
    acc(r.name) && acc(r.vaccinated) && acc(r.id) && acc(r.dob) && low(r.vaccinated)
)

method main(inputs: Seq[Seq[Ref]])
  requires lowEvent && low(|inputs|) && |inputs| == N()
  requires forall ip: Int :: ip >= 0 && ip < N() ==> low(|inputs[ip]|)
  requires forall ip: Int, jp: Int :: ip >= 0 && ip < N() && jp >= 0 && jp < |inputs[ip]| ==> patient(inputs[ip][jp])
{
  var ctr : Ref
  ctr := new(val)
  ctr.val := 0
  var l : Lock
  l := new(lockCounter)
  l.lockCounter := ctr
  share[CounterLock](l, 0)
  var i : Int := 0
  var threads : Array
  threads := emptyArray(|inputs|)
  while (i < |inputs|)
    invariant i >= 0 && i <= |inputs| && low(i)
    invariant forall j : Int :: j >= 0 && j < |inputs| && j >= i ==> [loc(threads, j).arr_loc |-> _]
    invariant forall j : Int :: j >= 0 && j < i ==> joinableArrayEntry(loc(threads, j), inputs[j], l, j)
    invariant sguard[CounterLock,Add](l, intervalSet(i, N())) && sguardArgs[CounterLock, Add](l, intervalSet(i, N())) == Multiset[Unit]()
    invariant forall ip: Int, jp: Int :: ip >= i && ip < N() && jp >= 0 && jp < |inputs[ip]| ==> patient(inputs[ip][jp])
  {
    var t: Thread
    assert Set(i) union intervalSet(i+1, N()) == intervalSet(i, N())
    split[CounterLock,Add](l, Set(i), intervalSet(i+1, N()), Multiset[Unit](), Multiset[Unit]())
    t := fork worker(inputs[i], l, i)
    loc(threads, i).arr_loc := t
    fold joinableArrayEntry(loc(threads, i), inputs[i], l, i)
    i := i + 1
  }
  
  i := 0
  while (i < |inputs|)
    invariant i >= 0 && i <= |inputs| && low(i)
    invariant forall j : Int :: j >= 0 && j < |inputs| && j >= i ==> joinableArrayEntry(loc(threads, j), inputs[j], l, j)
    invariant forall j : Int :: j >= 0 && j < i ==> [loc(threads, j).arr_loc |-> _] 
    invariant sguard[CounterLock,Add](l, intervalSet(0, i)) && allPre[CounterLock, Add](sguardArgs[CounterLock,Add](l, intervalSet(0, i)))
  {
    unfold joinableArrayEntry(loc(threads, i), inputs[i], l, i)
    join[worker](loc(threads, i).arr_loc)
    assert Set(i) union intervalSet(0, i) == intervalSet(0, i + 1)
    merge[CounterLock, Add](l, Set(i), intervalSet(0, i))
    i := i + 1
  }
  unshare[CounterLock](l)


  print(l.lockCounter.val)

}


method worker(inputs: Seq[Ref], l: Lock, lbl: Int)
  requires lowEvent && low(|inputs|) && sguard[CounterLock,Add](l, Set(lbl)) && sguardArgs[CounterLock,Add](l, Set(lbl)) == Multiset[Unit]()
  requires forall jp: Int :: jp >= 0 && jp < |inputs| ==> patient(inputs[jp])
  ensures sguard[CounterLock,Add](l, Set(lbl)) && allPre[CounterLock, Add](sguardArgs[CounterLock,Add](l, Set(lbl)))
{
  var i : Int := 0
  while (i < |inputs|) 
    invariant i >= 0 && i <= |inputs| && low(i) && sguard[CounterLock,Add](l, Set(lbl)) && allPre[CounterLock, Add](sguardArgs[CounterLock,Add](l, Set(lbl)))
    invariant forall jp: Int :: jp >= 0 && jp < |inputs| ==> patient(inputs[jp])
  {
    var v: Bool
    v := compute(inputs[i])
    if (v) {
        with[CounterLock] l performing Add(unit()) at lbl {
            l.lockCounter.val := l.lockCounter.val + 1
        }
    }


    i := i + 1
  }
}

field f: Int

lockType Okay {
  type Int
  invariant(l, v) = [l.f |-> ?fv && v == 2*fv && v >= 0]
  alpha(v): Int = v

  actions = [(Add,Int,unique), (Add2,Int,duplicable)]

  action Add(v, a)
    requires low(a) && a > 0
  { (v + a) }

  action Add2(v, a)
      requires low(a) && a > 0
    { (v + a) }

  noLabels = 5
}

method okayShared(l: Lock) returns (r: Int)
  requires sguard[Okay, Add2](l, Set(3))
  requires sguardArgs[Okay, Add2](l, Set(3)) == Multiset()
  ensures sguard[Okay, Add2](l, Set(3))
  ensures sguardArgs[Okay, Add2](l, Set(3)) == Multiset(4)
  ensures allPre[Okay, Add2](Multiset(4))
{
  with[Okay] l when l.f > 5 performing Add2(4) at 3 {
    assert l.f > 3
    l.f := l.f + 2
  }
}

method sharedSmoke1(l: Lock) returns (r: Int)
  requires sguard[Okay, Add2](l, Set(3))
  requires sguardArgs[Okay, Add2](l, Set(3)) == Multiset()
  ensures sguard[Okay, Add2](l, Set(3))
  ensures sguardArgs[Okay, Add2](l, Set(3)) == Multiset(4)
{
  with[Okay] l when l.f > 5 performing Add2(4) at 3 {
    // here
    assert false
    l.f := l.f + 2
  }
}

method sharedSmoke2(l: Lock) returns (r: Int)
  requires sguard[Okay, Add2](l, Set(3))
  requires sguardArgs[Okay, Add2](l, Set(3)) == Multiset()
  ensures sguard[Okay, Add2](l, Set(3))
  ensures sguardArgs[Okay, Add2](l, Set(3)) == Multiset(4)
  // here
  ensures false
{
  with[Okay] l when l.f > 5 performing Add2(4) at 3 {
    l.f := l.f + 2
  }
}

method sharedArgsChanged(l: Lock) returns (r: Int)
  requires sguard[Okay, Add2](l, Set(3))
  requires sguardArgs[Okay, Add2](l, Set(3)) == Multiset()
  ensures sguard[Okay, Add2](l, Set(3))
  // here
  ensures sguardArgs[Okay, Add2](l, Set(3)) == Multiset()
{
  with[Okay] l when l.f > 5 performing Add2(4) at 3 {
    assert l.f > 3
    l.f := l.f + 2
  }
}

method sharedNoGuard(l: Lock) returns (r: Int)
{
  // here
  with[Okay] l when l.f > 5 performing Add2(4) at 3 {
    assert l.f > 3
    l.f := l.f + 2
  }
}

method sharedWrongLabel(l: Lock) returns (r: Int)
  requires sguard[Okay, Add2](l, Set(3))
  requires sguardArgs[Okay, Add2](l, Set(3)) == Multiset()
  ensures sguard[Okay, Add2](l, Set(3))
  ensures sguardArgs[Okay, Add2](l, Set(3)) == Multiset(4)
{
  // here
  with[Okay] l performing Add2(4) at 7 {
    assert l.f > 3
    l.f := l.f + 2
  }
}

method sharedNotActionArg(l: Lock) returns (r: Int)
  requires sguard[Okay, Add2](l, Set(3))
  requires sguardArgs[Okay, Add2](l, Set(3)) == Multiset()
  ensures sguard[Okay, Add2](l, Set(3))
  ensures sguardArgs[Okay, Add2](l, Set(3)) == Multiset(4)
{
  // here
  with[Okay] l performing Add2(4) at 3 {
    l.f := l.f + 7
  }
}

method sharedNotAllPre(l: Lock, h: Int) returns (r: Int)
  requires sguard[Okay, Add2](l, Set(3))
  requires sguardArgs[Okay, Add2](l, Set(3)) == Multiset()
  requires h % 2 == 0 && h > 0
  ensures sguard[Okay, Add2](l, Set(3))
  ensures sguardArgs[Okay, Add2](l, Set(3)) == Multiset(h)
  // here
  ensures allPre[Okay, Add2](Multiset(h))
{
  with[Okay] l when l.f > 5 performing Add2(h) at 3 {
    assert l.f > 3
    l.f := l.f + (h \ 2)
  }
}

method okayUnique(l: Lock) returns (r: Int)
  requires uguard[Okay, Add](l)
  requires uguardArgs[Okay, Add](l) == Seq()
  ensures uguard[Okay, Add](l)
  ensures uguardArgs[Okay, Add](l) == Seq(4)
  ensures allPre[Okay, Add](Seq(4))
{
  with[Okay] l when l.f > 5 performing Add(4)  {
    assert l.f > 3
    l.f := l.f + 2
  }
}

method uniqueSmoke1(l: Lock) returns (r: Int)
  requires uguard[Okay, Add](l)
  requires uguardArgs[Okay, Add](l) == Seq()
  ensures uguard[Okay, Add](l)
  ensures uguardArgs[Okay, Add](l) == Seq(4)
  ensures allPre[Okay, Add](Seq(4))
{
  with[Okay] l when l.f > 5 performing Add(4)  {
    // here
    assert false
    l.f := l.f + 2
  }
}

method uniqueSmoke2(l: Lock) returns (r: Int)
  requires uguard[Okay, Add](l)
  requires uguardArgs[Okay, Add](l) == Seq()
  ensures uguard[Okay, Add](l)
  ensures uguardArgs[Okay, Add](l) == Seq(4)
  ensures allPre[Okay, Add](Seq(4))
  // here
  ensures false
{
  with[Okay] l when l.f > 5 performing Add(4)  {
    assert l.f > 3
    l.f := l.f + 2
  }
}

method uniqueGuardsChanged(l: Lock) returns (r: Int)
  requires uguard[Okay, Add](l)
  requires uguardArgs[Okay, Add](l) == Seq()
  ensures uguard[Okay, Add](l)
  // here
  ensures uguardArgs[Okay, Add](l) == Seq()
{
  with[Okay] l when l.f > 5 performing Add(4)  {
    assert l.f > 3
    l.f := l.f + 2
  }
}

method uniqueNoGuard(l: Lock) returns (r: Int)

{
  // here
  with[Okay] l when l.f > 5 performing Add(4)  {
    assert l.f > 3
    l.f := l.f + 2
  }
}

method uniqueWrongAction(l: Lock) returns (r: Int)
  requires uguard[Okay, Add](l)
  requires uguardArgs[Okay, Add](l) == Seq()
  ensures uguard[Okay, Add](l)
  ensures uguardArgs[Okay, Add](l) == Seq(4)
{
  // here
  with[Okay] l when l.f > 5 performing Add(4)  {
    assert l.f > 3
    l.f := l.f + 7
  }
}

method uniqueNotAllPre(l: Lock, h: Int) returns (r: Int)
  requires uguard[Okay, Add](l)
  requires h > 0 && h % 2 == 0
  requires uguardArgs[Okay, Add](l) == Seq()
  ensures uguard[Okay, Add](l)
  ensures uguardArgs[Okay, Add](l) == Seq(h)
  // here
  ensures allPre[Okay, Add](Seq(h))
{
  with[Okay] l when l.f > 5 performing Add(h)  {
    assert l.f > 3
    l.f := l.f + (h \ 2)
  }
}

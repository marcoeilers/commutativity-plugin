field f1 : Int
field f2 : Int

domain Pair[T,V] {
  function pair(t: T, v: V) : Pair[T,V]
  function fst(p: Pair[T, V]) : T
  function snd(p: Pair[T, V]) : V

  axiom fst_def {
    forall t: T, v: V :: {fst(pair(t, v))} fst(pair(t, v)) == t
  }

  axiom snd_def {
    forall t: T, v: V :: {snd(pair(t, v))} snd(pair(t, v)) == v
  }

  axiom bijection {
    forall p: Pair[T, V] :: {fst(p)}{snd(p)} pair(fst(p),snd(p))==p
  }

}

// simple with secinv okay, not okay
lockType Okay {
  type Pair[Int, Int]
  invariant(l, v) = [l.f1 |-> ?fv1 && fst(v) == fv1 && [l.f2 |-[1/2]-> ?fv2 && snd(v) == fv2]]
  alpha(v): Int = fst(v)

  actions = [(Add,Int,unique),(Inc,Int,unique)]

  action Add(v, a)
    requires low(a)
  { pair(fst(v) + a, snd(v)) }

  action Inc(v, a)
    requires true
  { pair(fst(v) + 1, a) }
}

lockType NoCommute {
  type Pair[Int, Int]
  invariant(l, v) = [l.f1 |-> ?fv1 && fst(v) == fv1 && [l.f2 |-[1/2]-> ?fv2 && snd(v) == fv2]]
  //:: ExpectedOutput(commutativity.check.failed:assertion.false)
  alpha(v): Int = fst(v)

  actions = [(Add,Int,unique),(Mul,Int,unique)]

  action Add(v, a)
    requires low(a)
  { pair(fst(v) + a, snd(v)) }

  action Mul(v, a)
    requires low(a)
  { pair(fst(v) * a, a) }
}

// one with itself, unique and duplicable
lockType OkayBecauseUnique {
  type Pair[Int, Int]
  invariant(l, v) = [l.f1 |-> ?fv1 && fst(v) == fv1 && [l.f2 |-[1/2]-> ?fv2 && snd(v) == fv2]]
  alpha(v): Int = fst(v)

  actions = [(Sub,Int,unique)]

  action Sub(v, a)
    requires low(a)
  { pair(a - fst(v), snd(v)) }
}

lockType NotOkayBecauseDuplicable {
  type Pair[Int, Int]
  invariant(l, v) = [l.f1 |-> ?fv1 && fst(v) == fv1 && [l.f2 |-[1/2]-> ?fv2 && snd(v) == fv2]]
  //:: ExpectedOutput(commutativity.check.failed:assertion.false)
  alpha(v): Int = fst(v)

  actions = [(Sub,Int,duplicable)]

    action Sub(v, a)
      requires low(a)
    { pair(a - fst(v), snd(v)) }
}

// proof makes it okay

lockType OkayBecauseProofAssumption {
  type Pair[Int, Int]
    invariant(l, v) = [l.f1 |-> ?fv1 && fst(v) == fv1 && [l.f2 |-[1/2]-> ?fv2 && snd(v) == fv2]]
    alpha(v): Int = fst(v)

    actions = [(Sub,Int,duplicable)]

        action Sub(v, a)
          requires low(a)
        { pair(a - fst(v), snd(v)) }

  proof commutativity[Sub, Sub](v, a1, a2) {
    assume a1 == a2
  }
}

// assert in proof
lockType OkayButAssert {
  type Pair[Int, Int]
  invariant(l, v) = [l.f1 |-> ?fv1 && fst(v) == fv1 && [l.f2 |-[1/2]-> ?fv2 && snd(v) == fv2]]
  alpha(v): Int = fst(v)

  actions = [(Add,Int,unique),(Inc,Int,unique)]

  action Add(v, a)
    requires low(a)
  { pair(fst(v) + a, snd(v)) }

  action Inc(v, a)
    requires true
  { pair(fst(v) + 1, a) }

  proof commutativity[Add,Inc](v0, a1, a2) {
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
  }
}
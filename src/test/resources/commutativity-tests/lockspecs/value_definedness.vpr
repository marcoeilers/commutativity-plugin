field f: Int


lockType Okay {
  type Int
  invariant(l, v) = [l.f |-> ?fv && v == 2*fv]
  alpha(v): Int = v

  actions = []
}

//:: ExpectedOutput(uniqueness.check.failed:assertion.false)
lockType NotDefined {
  type Int
  invariant(l, v) = [l.f |-> ?fv && true]
  alpha(v): Int = v

  actions = []
}

//:: ExpectedOutput(uniqueness.check.failed:assertion.false)
lockType NotUnique {
  type Int
  invariant(l, v) = [l.f |-> ?fv && v \ 2 == fv]
  alpha(v): Int = v

  actions = []
}
field f : Int
field f2 : Int

lockType InvNotWelldef {
  type Int
  //:: ExpectedOutput(not.wellformed:division.by.zero)
  invariant(l, v) = [l.f |-> ?fv && v == 2\fv]
  alpha(v): Int = v

  actions = []

  noLabels = 5

}

lockType InvNotWelldef2 {
  type Int
  //:: ExpectedOutput(not.wellformed:insufficient.permission)
  invariant(l, v) = [l.f |-> ?fv && v == l.f2]
  alpha(v): Int = v

  actions = []
  noLabels = 5

}

lockType SecInvNotWelldef {
  type Int
  invariant(l, v) = [l.f |-> ?fv && v == fv]
  //:: ExpectedOutput(not.wellformed:division.by.zero)
  alpha(v): Int = (2 \ (v+1))

  actions = []

  noLabels = 5
}


lockType NewValNotWellDef {
  type Int
  invariant(l, v) = [l.f |-> ?fv && v == fv]
  alpha(v): Int = v

  actions = [(Add,Int,unique)]

  action Add(v, a)
    requires low(a)
  //:: ExpectedOutput(not.wellformed:division.by.zero)
  { (v \ a) }

  noLabels = 5
}

lockType PreNotWellDef {
  type Int
  invariant(l, v) = [l.f |-> ?fv && v == fv]
  alpha(v): Int = v

  actions = [(Add,Int,unique)]

  action Add(v, a)
    //:: ExpectedOutput(not.wellformed:division.by.zero)
    requires low(2\a)
  { (v + a) }

  noLabels = 5
}

lockType NoLabelsBad {
  type Int
  invariant(l, v) = [l.f |-> ?fv && v == 2*fv]
  alpha(v): Int = v

  actions = []

  //:: ExpectedOutput(not.wellformed:assertion.false)
  noLabels = -1
}
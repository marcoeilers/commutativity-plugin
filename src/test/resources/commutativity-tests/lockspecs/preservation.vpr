field f : Int

lockType Okay {
  type Int
  invariant(l, v) = [l.f |-> ?fv && v == 2*fv && v >= 0]
  alpha(v): Int = v

  actions = [(Add,Int,unique)]

  action Add(v, a)
    requires low(a) && a > 0
  { (v + a) }
}

lockType NotLow {
  type Int
  invariant(l, v) = [l.f |-> ?fv && v == 2*fv && v >= 0]
  //:: ExpectedOutput(preservation.check.failed:assertion.false)
  alpha(v): Int = v

  actions = [(Add,Int,unique)]

  action Add(v, a)
    requires a > 0
  { (v + a) }
}

lockType NotLowButAssumeInProof {
  type Int
  invariant(l, v) = [l.f |-> ?fv && v == 2*fv && v >= 0]
  alpha(v): Int = v

  actions = [(Add,Int,unique)]

  action Add(v, a)
    requires a > 0
  { (v + a) }

  proof preservation[Add](v0, a0) {
    assume low(a0)
  }
}

lockType OkayButAssertFalse {
  type Int
  invariant(l, v) = [l.f |-> ?fv && v == 2*fv && v >= 0]
  alpha(v): Int = v

  actions = [(Add,Int,unique)]

  action Add(v, a)
    requires low(a) && a > 0
  { (v + a) }

  proof preservation[Add](v, a) {
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert false
  }
}

